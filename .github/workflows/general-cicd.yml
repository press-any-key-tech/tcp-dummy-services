name: general-cicd

on:
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
      tags:
        description: "Manual launch"

jobs:
  BuildJob:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==1.7.1
    
      - name: Update version
        run: |
          poetry version patch
  
      - name: Commit and push version update
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add pyproject.toml
          git commit -m "Update version" || echo "No changes to commit"
          git push origin HEAD

      - name: Set ImageTag from poetry version
        id: version
        run: |
          echo "IMAGE_TAG=$(poetry version -s)" >> $GITHUB_ENV

      - name: Display Image Tag
        run: echo "IMAGE_TAG is ${{ env.IMAGE_TAG }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to DockerHub
        id: login-dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        id: build-push-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false # Build but do not push yet
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ vars.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}


      - name: Get image digest
        id: get-digest
        run: |
          DIGEST=$(docker buildx imagetools inspect ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} --format '{{json .Manifest.Digest}}')
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Push amd64 image
        run: |
          docker buildx imagetools create --tag ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}-amd64 ${{ env.DIGEST }}@linux/amd64
          docker buildx imagetools create --tag ${{ vars.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}-amd64 ${{ env.DIGEST }}@linux/amd64

      - name: Push arm64 image
        run: |
          docker buildx imagetools create --tag ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}-arm64 ${{ env.DIGEST }}@linux/arm64
          docker buildx imagetools create --tag ${{ vars.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}-arm64 ${{ env.DIGEST }}@linux/arm64
